program           -> declaration* EOF ;
declaration       -> funDecl
                  |  varDecl
                  |  statement ;
funDecl           -> "fun" function ;
function          -> IDENTIFIER? "(" parameters? ")" block ;
parameters        -> IDENTIFIER ("," IDENTIFIER)* ;
varDecl           -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement         -> exprStatement
                  | ifStatement
                  | whileStatement
                  | breakStatement
                  | continueStatement
                  | returnStatement
                  | block ;
exprStatement     -> expression ";" ;
ifStatement       -> "if" "(" expression ")" statement ( "else" statement )? ;
whileStatement    -> "while" "(" expression ")" statement ;
breakStatement    -> "break" ";" ;
continueStatement -> "continue" ";" ;
returnStatement   -> "return" expression? ";" ;
block             -> "{" declaration* "}" ;
expression        -> assignment ( "?" assignment ":" assignment )? ;
assignment        -> IDENTIFIER "=" assignment
                  | logicalOr ;
logicalOr         -> logicalAnd ( "||" logicalAnd )* ;
logicalAnd        -> equality ( "&&" equality )* ;
equality          -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison        -> term ( ( "<" | "<=" | ">" | ">=" ) term )* ;
term              -> factor ( ( "+" | "-" ) factor )* ;
factor            -> unary ( ( "/" | "*" | "%" ) unary )* ;
unary             -> ( "!" | "-" ) unary
                  | call ;
call              -> funcCall
                  | indexCall ;
funcCall          -> atom ( "(" arguments? ")" )* ;
indexCall         -> atom ( "[" expression "]" )* ;
arguments         -> expression ( "," expression )* ;
atom              -> NUMBER | STRING | "true" | "false" | "nil"
                  | "(" expression ")"
                  | list
                  | map
                  | funDecl
                  | IDENTIFIER ;
list              -> "[" arguments? "]" ;
map               -> "{" mapItems? "}" ;
mapItems          -> expression ":" expression ( "," expression ":" expression )* ;
