// Function declarations
{
    print("TEST FUNCTIONS")

    fun adder(a, b) {
        return a + b
    }

    assert adder(1,2) == 3

    var counts = []
    fun count(n) {
        if (n > 1) count(n - 1)
        counts = append(counts, n)
    }
    count(3)

    assert counts == [1, 2, 3]
    
    println("OK")
}

// Closures
{
    print("TEST CLOSURES...")

    fun makeCounter() {
        var i = 0
        fun count() {
            i = i + 1
            return i
        }

        return count
    }

    var counter = makeCounter()
    assert counter() == 1
    assert counter() == 2
    println("OK")
}

// Anonymous functions
{
    print("TEST ANONYMOUS FUNCTIONS...")

    fun caller(f){
        return f()
    }

    assert caller(
        fun (){
            return "called"
        }
    ) == "called"


    var plus1 = fun (n){
        return n + 1 
    }
    assert plus1(1) == 2

    assert fun (one, two, three){
        return one + two + three
    }("anon", "called", "directly") == "anoncalleddirectly"

    println("OK")
}

// Deferred calls
{
    print("TEST DEFER...")

    var defer1 = false
    var defer2 = false

    fun testDeferredCalls(){
        defer fun (){
            defer1 = true
        }()

        defer fun (){
            defer2 = true
        }()

        assert defer1 == false
        assert defer1 == false
    }

    assert defer1 == false
    assert defer1 == false

    testDeferredCalls()

    assert defer1 == true
    assert defer1 == true

    println("OK")
}
