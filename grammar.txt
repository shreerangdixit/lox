program        -> declaration* EOF ;
declaration    -> letDecl
               |  statement ;
letDecl        -> "let" IDENTIFIER ( "=" expression )? ";" ;
statement      -> exprStatement
               | ifStatement
               | printStatement
               | whileStatement
               | block ;
exprStatement  -> expression ";" ;
ifStatement    -> "if" "(" expression ")" statement ( "else" statement )? ;
printStatement -> "print" expression ";" ;
whileStatement -> "while" "(" expression ")" statement ;
block          -> "{" declaration* "}" ;
expression     -> assignment ( "?" assignment ":" assignment )? ;
assignment     -> IDENTIFIER "=" assignment
               | logical_or ;
logical_or     -> logical_and ( "||" logical_and )* ;
logical_and    -> equality ( "&&" equality )* ;
equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( "<" | "<=" | ">" | ">=" ) term )* ;
term           -> factor ( ( "+" | "-" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary
                | call ;
call           -> atom ( "(" arguments? ")" )*
                | atom "[" expression "]";
arguments      -> expression ( "," expression )* ;
atom           -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | "[" arguments? "]"
               | IDENTIFIER ;
